default:
  tags:
      - kgr1-instance-mini

variables:
  LIB_REPO_URL: https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.kit.edu/${CI_PROJECT_NAMESPACE}/lib.git
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  # CI_DEBUG_SERVICES: true
  PYTHONUNBUFFERED: true

stages:
  - build_image
  - test
  - coverage
  - docs

cache:
  paths:
    - .cache/pip

build_image:
  needs: []
  before_script: []
  stage: build_image
  tags:
    - kgr1-instance-standard
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - >-
      echo '{"auths":{"https://registry.cert.kit.edu/v2/":{"auth": "'$(echo -n ${REGISTRY_USER}:${REGISTRY_PASSWORD} | base64 -w 0)'" }}}' > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --build-arg LIB_REPO_URL=${LIB_REPO_URL}
      --build-arg BRANCH=${CI_COMMIT_BRANCH}
      --build-arg INSTALL_LIB=true 
      --destination ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/api:${CI_COMMIT_BRANCH}
      --destination ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/api:${CI_COMMIT_SHA}


pytest_mariadb:
  parallel: 8
  stage: test
  image: ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/api:${CI_COMMIT_SHA}
  script:
    - |
      python -c "
      import time
      import mysql.connector
      connection_available = False
      while not connection_available:
        try:
          conn = mysql.connector.connect(user='root',
            password='misp', host='db', database='mmisp-tests')
          connection_available = True
        except mysql.connector.errors.DatabaseError as e:
          print(e)
          time.sleep(3)
      conn.close()"
    - pytest --test-group-count $CI_NODE_TOTAL --test-group=$CI_NODE_INDEX tests/api/routers
  services:
    - name: mariadb:latest
      alias: db
  variables:
    MARIADB_ROOT_PASSWORD: misp
    MARIADB_DATABASE: mmisp-tests
    DATABASE_URL: "mysql+aiomysql://root:misp@db:3306/mmisp-tests"
    HASH_SECRET: hO1cfVGuFGsNwGvw9xzxnq5sU
    WORKER_KEY: GcXh5TAq8RxYvdTpdioP0nI20Le
    OWN_URL: http://localhost:4000
    WORKER_URL: https://worker.mmisp.service
    DASHBOARD_URL: https://dashboard.mmisp.service
    DEBUG: true


pytest:
  parallel: 8
  stage: test
  image: ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/api:${CI_COMMIT_SHA}
  script:
    - ENV_FILE=.env.test.lite pytest --test-group-count $CI_NODE_TOTAL --test-group=$CI_NODE_INDEX  --cov --cov-report term tests/api/routers
  variables:
    COVERAGE_FILE: ".coverage.${CI_NODE_INDEX}"
  artifacts:
    paths:
      - ".coverage.*"

pytest_coverage_combine:
  stage: coverage
  image: ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/api:${CI_COMMIT_SHA}
  script:
    - coverage combine
    - coverage xml 
    - coverage report
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# also run pytest with sqlalchemy v2
pytest_sa2:
  parallel: 8
  stage: test
  image: ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/api:${CI_COMMIT_SHA}
  script:
    - pip install "sqlalchemy>=2.0"
    - ENV_FILE=.env.test.lite pytest --test-group-count $CI_NODE_TOTAL --test-group=$CI_NODE_INDEX  tests/api/routers

mypy:
  stage: test
  image: ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/api:${CI_COMMIT_SHA}
  script:
    - pip install "sqlalchemy>=2.0"
    - MYPYPATH=src mypy --explicit-package-bases src/mmisp/api

legacy_misp:
  stage: test
  image: ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/api:${CI_COMMIT_SHA}
  script:
    - sleep 60
    - curl -v http://misp-core/users/heartbeat
    - sleep 60
    - date
    - |
      python -c "
      import time
      import mysql.connector
      from icecream import ic
      conn = mysql.connector.connect(user='root', password='misp', host='db', database='misp')
      conn.autocommit = True
      value = 1
      while value < 120:
          cursor = conn.cursor();
          cursor.execute(\"SELECT description, \`change\` FROM logs ORDER by id DESC LIMIT 5\");
          print(cursor.fetchall())
          cursor.execute(\"SELECT value FROM admin_settings WHERE setting='db_version'\");
          value = int(cursor.fetchone()[0])
          print('DB Version is', value)
          cursor.close()
          time.sleep(5)
      conn.close()"
    - pytest tests/compatibility_tests
  services:
    - name: mariadb:latest
      alias: db
      variables:
        HEALTHCHECK_TCP_PORT: 3306
    - name: registry.cert.kit.edu/public-gitlab-ci/misp-core:latest
      alias: misp-core
      variables:
        MYSQL_PASSWORD: misp
        MYSQL_USER: root
        DISABLE_SSL_REDIRECT: true
        HEALTHCHECK_TCP_PORT: 80
        ENABLE_DB_SETTINGS: "false"
        DEBUG: 1
    - name: valkey/valkey:7.2
      alias: redis
      variables:
        HEALTHCHECK_TCP_PORT: 6379
  variables:
    MARIADB_ROOT_PASSWORD: misp
    MARIADB_DATABASE: misp
    DATABASE_URL: "mysql+aiomysql://root:misp@db:3306/misp"
    HASH_SECRET: hO1cfVGuFGsNwGvw9xzxnq5sU
    WORKER_KEY: GcXh5TAq8RxYvdTpdioP0nI20Le
    OWN_URL: http://localhost:4000
    WORKER_URL: https://worker.mmisp.service
    DASHBOARD_URL: https://dashboard.mmisp.service
    DEBUG: true

generate_mkdocs:
  before_script: []
  stage: docs
  image: registry.cert.kit.edu/public-gitlab-ci/mkdocs
  script:
    - source /root/.venv/bin/activate; PYTHONPATH=src mkdocs build
  artifacts:
    paths:
      - site
  services:
    - name: plantuml/plantuml-server
      alias: plantuml
